<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ly.dao.OrdersMapper">

	<!-- 自动生成sqlCRUD begin -->
	<resultMap id="BaseResultMap" type="com.ly.domain.Orders">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="number" property="number" jdbcType="VARCHAR" />
		<result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
		<result column="note" property="note" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="Base_Column_List">
		id, user_id, number, createtime, note
	</sql>

	<insert id="insert" parameterType="com.ly.domain.Orders">
		insert into orders (id,
		user_id, number,
		createtime, note)
		values (#{id,jdbcType=INTEGER},
		#{userId,jdbcType=INTEGER},
		#{number,jdbcType=VARCHAR},
		#{createtime,jdbcType=TIMESTAMP}, #{note,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.ly.domain.Orders">
		insert into orders
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="number != null">
				number,
			</if>
			<if test="createtime != null">
				createtime,
			</if>
			<if test="note != null">
				note,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="number != null">
				#{number,jdbcType=VARCHAR},
			</if>
			<if test="createtime != null">
				#{createtime,jdbcType=TIMESTAMP},
			</if>
			<if test="note != null">
				#{note,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from orders
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from orders
		where id = #{id,jdbcType=INTEGER}
	</select>

	<update id="updateByPrimaryKey" parameterType="com.ly.domain.Orders">
		update orders
		set
		user_id = #{userId,jdbcType=INTEGER},
		number =
		#{number,jdbcType=VARCHAR},
		createtime =
		#{createtime,jdbcType=TIMESTAMP},
		note = #{note,jdbcType=VARCHAR}
		where
		id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.ly.domain.Orders">
		update orders
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="number != null">
				number = #{number,jdbcType=VARCHAR},
			</if>
			<if test="createtime != null">
				createtime = #{createtime,jdbcType=TIMESTAMP},
			</if>
			<if test="note != null">
				note = #{note,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- 自动生成sqlCRUD end -->





	<!--定义查询订单关联查询用户信息的resultMap将整个查询结果映射到cn.zhisheng.mybatis.po.Orders -->
	<resultMap id="OrdersUserResultMap" type="com.ly.domain.Orders">
		<!--配置映射的订单信息 -->
		<!--id表示查询结果中的唯一标识 在这里是订单的唯一标识 如果是由多列组成的唯一标识，那么就需要配置多个id column：id 是订单信息中的唯一标识列 
			property：id 是订单信息唯一标识列所映射到orders中的id属性 最终resultMap对column和property做一个映射关系（对应关系） -->
		<id column="id" property="id" />
		<result column="user_id" property="userId" />
		<result column="number" property="number" />
		<result column="createtime" property="createtime" />
		<result column="note" property="note" />

		<!--配置映射的关联用户信息 association 用于映射关联查询单个对象的信息 property 将要关联查询的用户信息映射到 orders中的属性中去 -->
		<association property="userr" javaType="com.ly.domain.Userr">
			<!--id 关联用户信息的唯一标识 column: 指定唯一标识用户的信息 property：映射到user的那个属性 -->
			<id column="user_id" property="id" />
			<result column="username" property="username" />
			<result column="sex" property="sex" />
			<result column="address" property="address" />
			<result column="birthday" property="birthday" />
		</association>
	</resultMap>

	<!--查询订单关联查询用户信息, 使用 resultMap -->
	<select id="findOrdersUserResultMap" resultMap="OrdersUserResultMap">
		SELECT orders.*, USER.username, USER.sex, USER.birthday,USER.address FROM
		orders, USER WHERE orders.user_id = user.id
	</select>
	<!--=============================================== -->
	<!--定义查询订单及订单明细信息的resultMap使用extends继承，不用在中配置订单信息和用户信息的映射-->
	<resultMap type="com.ly.domain.Orders" id="OrdersAndOrderDetailResultMap" extends="OrdersUserResultMap">
		<!-- 订单信息 -->
        <!-- 用户信息 -->
        <!-- 使用extends继承，不用在中配置订单信息和用户信息的映射 -->
        <!-- 订单明细信息
        	一个订单关联查询出了多条明细，要使用collection进行映射
        collection：对关联查询到多条记录映射到集合对象中
        property：将关联查询到多条记录映射到cn.zhisheng.mybatis.po.Orders哪个属性
        ofType：指定映射到list集合属性中pojo的类型
         -->
		<collection property="orderdetails" ofType="com.ly.domain.Orderdetail">
		 <!-- id：订单明细唯 一标识 property:要将订单明细的唯 一标识 映射到cn.zhisheng.mybatis.po.Orderdetail的哪个属性-->
			<id column="orderdetail_id" property="id" />
			<result column="items_id" property="itemsId" />
			<result column="items_num" property="itemsNum" />
			<result column="orders_id" property="itemsId" />
		</collection>
	</resultMap>

	<!--查询订单及订单明细信息, 使用 resultMap-->
	<select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
		select orders.*,USER.username,USER.sex,USER.birthday,USER.address,orderdetail.id orderdetail_id,orderdetail.items_id,orderdetail.items_num, orderdetail.orders_id
        FROM orders,USER,orderdetail 
        WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id
	</select>

</mapper>